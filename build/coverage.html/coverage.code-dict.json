{"/home/travis/build/npmtest/node-npmtest-font-blast/test.js":"/* istanbul instrument in package npmtest_font_blast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-font-blast/lib.npmtest_font_blast.js":"/* istanbul instrument in package npmtest_font_blast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_font_blast = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_font_blast = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-font-blast/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-font-blast && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_font_blast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_font_blast\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_font_blast.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_font_blast.rollup.js'] =\n            local.assetsDict['/assets.npmtest_font_blast.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_font_blast.__dirname + '/lib.npmtest_font_blast.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/lib/index.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require(\"path\");\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _gracefulFs = require(\"graceful-fs\");\n\nvar _gracefulFs2 = _interopRequireDefault(_gracefulFs);\n\nvar _mkdirp = require(\"mkdirp\");\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _verify = require(\"./verify\");\n\nvar _verify2 = _interopRequireDefault(_verify);\n\nvar _glyphExtractor = require(\"./glyph-extractor\");\n\nvar _glyphExtractor2 = _interopRequireDefault(_glyphExtractor);\n\nvar _pngGenerator = require(\"./png-generator\");\n\nvar _pngGenerator2 = _interopRequireDefault(_pngGenerator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultConfig = {};\n\nfunction mainBlaster(fontFile, destinationFolder, userConfig) {\n  var config = Object.assign({}, defaultConfig, userConfig || {});\n  var svgFontContent = _gracefulFs2.default.readFileSync(fontFile, \"utf-8\");\n\n  return (0, _glyphExtractor2.default)(svgFontContent, config.filenames, function (characterSvgs) {\n    console.info(\"Found \" + characterSvgs.length + \" available icons in the font\");\n    console.info(\"Generating SVG content for each character...\");\n\n    var svgDir = _path2.default.resolve(process.cwd(), _path2.default.join(destinationFolder, \"svg\"));\n    var pngDir = _path2.default.resolve(process.cwd(), _path2.default.join(destinationFolder, \"png\"));\n\n    if (!_gracefulFs2.default.existsSync(svgDir)) _mkdirp2.default.sync(svgDir);\n\n    var savedIcons = [];\n    characterSvgs.forEach(function (char) {\n      var filename = char.name ? char.name : char.code;\n      //If a subset of icons set was requested, ignore any others that are not within the subset\n      if (config.icons && config.icons.length && config.icons.indexOf(char.code) === -1 && config.icons.indexOf(filename) === -1) {\n        return;\n      }\n      savedIcons.push(char);\n      _gracefulFs2.default.writeFileSync(_path2.default.join(svgDir, filename + \".svg\"), char.svg);\n    });\n    console.info(\"Saved \" + savedIcons.length + \" files to \" + svgDir);\n\n    if (config.png && !isNaN(config.png)) {\n      console.info(\"Generating PNG images - this may take a minute...\");\n      (0, _pngGenerator2.default)(svgDir, pngDir, config.png);\n    }\n\n    (0, _verify2.default)(svgFontContent, savedIcons, config.png, destinationFolder);\n  }, config.cleanCharacter);\n}\n\nexports.default = mainBlaster;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/lib/verify.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require(\"path\");\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _gracefulFs = require(\"graceful-fs\");\n\nvar _gracefulFs2 = _interopRequireDefault(_gracefulFs);\n\nvar _svg2ttf = require(\"svg2ttf\");\n\nvar _svg2ttf2 = _interopRequireDefault(_svg2ttf);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction generateVerifyFile(svgFont, iconSet, withPng, toFolder) {\n  //Convert the SVG file into a TTF file so that more browsers can parse and show it\n  var ttf = (0, _svg2ttf2.default)(svgFont, {});\n  _gracefulFs2.default.writeFileSync(_path2.default.join(toFolder, \"source-font.ttf\"), new Buffer(ttf.buffer));\n\n  //load the template for the verification file which contains some generic HTML\n  var htmlTemplate = _gracefulFs2.default.readFileSync(_path2.default.join(__dirname, \"..\", \"/resources/verify.html\"), \"utf-8\");\n  var iconContent = [];\n  var cssRules = [];\n\n  //Add a header to to the table\n  iconContent.push(\"<div class=\\\"row\\\">\\n    <div class=\\\"col icon-ref header\\\">&nbsp;</div>\\n    <div class=\\\"col header\\\">Font Icon</div>\\n    <div class=\\\"col header\\\">SVG Image</div>\\n    \" + (withPng ? '<div class=\"col header\">PNG Image</div>' : \"\") + \"\\n    </div>\");\n\n  //for reach icon in the set, add a reference from the original font\n  //then add a reference to the generated SVG image\n  //then optionally add the reference to the PNG image if one was created\n\n  iconSet.forEach(function (iconInfo) {\n    cssRules.push(\".blast-\" + iconInfo.ref + \":before { content: \\\"\\\\\" + iconInfo.code + \"\\\"}\\n\");\n    iconContent.push(\"\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col icon-ref\\\">\" + iconInfo.ref + \"</div>\\n        <div class=\\\"col\\\"><i class=\\\"blast-\" + iconInfo.ref + \"\\\"></i></div>\\n        <div class=\\\"col\\\"><img class=\\\"svg-icon\\\" src=\\\"svg/\" + iconInfo.ref + \".svg\\\"/></div>\\n        \" + (withPng ? '<div class=\"col\"><img class=\"png-icon\" src=\"png/' + iconInfo.ref + '.png\"/></div>' : \"\") + \"\\n        </div>\");\n  });\n  //poor man's templating\n  htmlTemplate = htmlTemplate.replace(/_height_/g, 130);\n  htmlTemplate = htmlTemplate.replace(/_iconRules_/g, cssRules.join(\"\"));\n  htmlTemplate = htmlTemplate.replace(/_iconContent_/g, iconContent.join(\"\"));\n  //generate the html test file\n  _gracefulFs2.default.writeFileSync(_path2.default.join(toFolder, \"verify.html\"), htmlTemplate);\n}\n\nexports.default = generateVerifyFile;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/lib/glyph-extractor.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _svgo = require(\"svgo\");\n\nvar _svgo2 = _interopRequireDefault(_svgo);\n\nvar _xmldom = require(\"xmldom\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar svgo = new _svgo2.default({});\n\n/**\n * Optimizes the SVG text and compresses the data 'path' for all lines\n * @param svgText Original SVG content\n * @reutrn string New SVG content\n */\nvar optimizeSvgText = function optimizeSvgText(svgText) {\n  return new Promise(function (resolve, reject) {\n    svgo.optimize(svgText, function (result) {\n      resolve(result.data);\n    });\n  });\n};\n\n/**\n * Callback recieves an array of characters with the format of\n * {\n * code: 'unicode',\n * name: 'special name, if provided',\n * ref: name or code\n * svg:  'full svg content required to render'\n * path: 'just the path from the svg content'\n * }\n *\n * @param fontSvgText SVG font definition containing all characters\n * @param charNameMap\n * @param callback\n * @param processCharInfoFn A function that provides the character filename\n * Array<IconInformation>\n */\nfunction extractCharsFromFont(fontSvgText, charNameMap, callbackFn, processCharInfoFn) {\n  var doc = new _xmldom.DOMParser().parseFromString(fontSvgText, \"text/xml\").documentElement;\n  var fontSpec = doc.getElementsByTagName(\"font\")[0];\n  var defaultCharWidth = fontSpec.getAttribute(\"horiz-adv-x\");\n  var fontFace = doc.getElementsByTagName(\"font-face\")[0];\n  var defaultCharHeight = fontFace.getAttribute(\"units-per-em\");\n  var defaultCharAscent = fontFace.getAttribute(\"ascent\");\n  var glyphs = doc.getElementsByTagName(\"glyph\");\n\n  //\"square\" fonts tend to be based at the center (like glyphicon)\n  //white other fonts tend to be based around the charAscent mark\n  //so when need to flip them with different adjustments\n  //(defaultCharWidth == defaultCharHeight ? defaultCharHeight : defaultCharAscent),\n  var translateOffset = defaultCharAscent;\n  var charMap = charNameMap || {};\n  var cleanCharacter = processCharInfoFn || function (char) {\n    return char;\n  };\n\n  var dataOnGlyphs = [];\n  for (var i = 0; i < glyphs.length; i++) {\n    var glyph = glyphs[i];\n    //some strange fonts put empty glyphs in them\n    if (!glyph) continue;\n    var iconCode = glyph.getAttribute(\"unicode\");\n    var pathData = glyph.getAttribute(\"d\");\n    var customWidthMatch = glyph.getAttribute(\"horiz-adv-x\");\n    var contentWidth = customWidthMatch ? customWidthMatch : defaultCharWidth;\n\n    //some glyphs matched without a unicode value so we should ignore them\n    if (!iconCode) continue;\n\n    if (iconCode.indexOf(\"&#\") !== -1) {\n      iconCode = iconCode.replace(\"&#x\", \"\");\n    }\n\n    if (iconCode.length === 1) {\n      iconCode = iconCode.charCodeAt(0).toString(16);\n    }\n\n    //Skip empty-looking glyphs\n    if (!iconCode.length || !pathData || pathData.length < 10) continue;\n\n    var useCharacterName = charMap[iconCode] || glyph.getAttribute(\"glyph-name\") || iconCode;\n\n    var charInfo = {\n      code: iconCode,\n      name: useCharacterName,\n      ref: useCharacterName || iconCode,\n      path: pathData,\n      svg: \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 \" + contentWidth + \" \" + defaultCharHeight + \"\\\">\\n        <g transform=\\\"scale(1,-1) translate(0 -\" + translateOffset + \")\\\">\\n            <path d=\\\"\" + pathData + \"\\\"/>\\n        </g></svg>\"\n    };\n    dataOnGlyphs = dataOnGlyphs.concat(charInfo);\n  }\n\n  var cleanAllPromises = dataOnGlyphs.map(function (charInfo) {\n    return optimizeSvgText(charInfo.svg).then(function (cleanSvg) {\n      var newInfo = Object.assign({}, charInfo, {\n        svg: cleanSvg,\n        path: cleanSvg.match(/d=\"(.*?)\"/)[1]\n      });\n      if (cleanCharacter) newInfo = cleanCharacter(newInfo);\n      return newInfo;\n    });\n  });\n\n  var promise = Promise.all(cleanAllPromises);\n  if (callbackFn) {\n    promise = promise.then(callbackFn);\n  }\n  return promise;\n}\n\nexports.default = extractCharsFromFont;\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/lib/png-generator.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (sourceDir, targetDir, size) {\n  if (!_fs2.default.existsSync(targetDir)) _mkdirp2.default.sync(targetDir);\n\n  var batikFile = _path2.default.resolve(__dirname, \"../batik/batik-rasterizer.jar\");\n  var params = [\"-jar\", batikFile, \"-d\", targetDir, \"-maxh\", size, sourceDir];\n\n  // let cmd = null;\n  // let params = [];\n\n  // if (converterExec == \"batik\") {\n  // cmd = 'java';\n\n  // }\n  //var converterParams = getRasterizerParams(converterExec, {\n  //    toDir:     saveToDir,\n  //    maxHeight: size,\n  //    sourceDir: sourceDir\n  //});\n\n  (0, _child_process.exec)(\"java \" + params.join(\" \"), function (err) {});\n  // var coverter = spawn(cmd, params);\n  // coverter.on('error', function (data) {\n  //     //console.log(data.toString());\n  // });\n  //\n  // coverter.stdout.on('data', function (data) {\n  //     //console.log(data.toString());\n  // });\n  // coverter.stderr.on('data', function (data) {\n  //     //console.log(data.toString());\n  // });\n};\n\nvar _path = require(\"path\");\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require(\"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _mkdirp = require(\"mkdirp\");\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _child_process = require(\"child_process\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports[\"default\"];\n\n// var converterExec = \"batik\";\n//Currently converts svg with apache batik\n//Add handlers for more processors, like rsvg or GraphicsMagick\n\n//Add an option to trim images on output\n//through GM or IM\n//gm mogrify -trim *\n//Perhaps trim SVGs as well? no need, they can be imported into any SVG tool already\n\n//add an option to optimize PNGs\n//add an option to generate sprits from PNGs or SVGs\n\n//\n//function getRasterizerParams(resizerName, ops) {\n//    var params = [];\n//\n//    if (resizerName == 'batik-rasterizer') {\n//        params = ['-d', ops.toDir, '-maxh', ops.maxHeight, ops.sourceDir];\n//    }\n//\n//    return params;\n//}","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/bin/font-blast.js":"#!/usr/bin/env node\nvar fs = require(\"graceful-fs\");\nvar pckg = require(\"../package.json\");\nvar program = require(\"commander\");\nvar blaster = require(\"../lib/index\");\n\nprogram\n  .version(pckg.version)\n  .usage(\"[options] svg-font.svg outputDir\")\n  .option(\n    \"-i, --icons <icon-refs>\",\n    \"Limit the output to the selected icons. Icons can be provided with their unicode value or the full reference\",\n    function(val) {\n      return val ? val.split(\",\") : [];\n    }\n  )\n  .option(\n    \"-p, --png <heightInPx>\",\n    \"Include this to generate PNG files. Please note you will need to have an executable binary in your path for 'batik-rasterizer'\",\n    parseInt\n  )\n  .option(\n    \"-c, --color <colorcode>\",\n    \"Set the color of icons in the output (relevant mainly for PNG files)\"\n  )\n  .parse(process.argv);\n\nvar svgFontFile = program.args[0], outputDir = program.args[1];\nif (!svgFontFile || !outputDir) {\n  program.help();\n}\n\nif (!fs.existsSync(svgFontFile)) {\n  console.error(\"This provided SVG font file does not exist\");\n  process.exit();\n}\n\nvar config = {\n  icons: program.icons,\n  png: program.png,\n  color: program.color\n};\nblaster(svgFontFile, outputDir, config);\n","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/lib/cli-font-blast.js":"#!/usr/bin/env node\n\"use strict\";\n\nvar _gracefulFs = require(\"graceful-fs\");\n\nvar _gracefulFs2 = _interopRequireDefault(_gracefulFs);\n\nvar _package = require(\"../package.json\");\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _commander = require(\"commander\");\n\nvar _commander2 = _interopRequireDefault(_commander);\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_commander2.default.version(_package2.default.version).usage(\"[options] svg-font.svg outputDir\").option(\"-i, --icons <icon-refs>\", \"Limit the output to the selected icons. Icons can be provided with their unicode value or the full reference\", function (val) {\n  return val ? val.split(\",\") : [];\n}).option(\"-p, --png <heightInPx>\", \"Include this to generate PNG files. Please note you will need to have an executable binary in your path for 'batik-rasterizer'\", parseInt).option(\"-c, --color <colorcode>\", \"Set the color of icons in the output (relevant mainly for PNG files)\").parse(process.argv);\n\nvar svgFontFile = _commander2.default.args[0],\n    outputDir = _commander2.default.args[1];\nif (!svgFontFile || !outputDir) {\n  _commander2.default.help();\n}\n\nif (!_gracefulFs2.default.existsSync(svgFontFile)) {\n  console.error(\"This provided SVG font file does not exist\");\n  process.exit();\n}\n\nvar config = {\n  icons: _commander2.default.icons,\n  png: _commander2.default.png,\n  color: _commander2.default.color\n};\n(0, _index2.default)(svgFontFile, outputDir, config);","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/src/cli-font-blast.js":"#!/usr/bin/env node\nimport fs from \"graceful-fs\";\nimport pckg from \"../package.json\";\nimport program from \"commander\";\nimport blaster from \"./index\";\nimport type { UserConf } from \"./index\";\n\nprogram\n  .version(pckg.version)\n  .usage(\"[options] svg-font.svg outputDir\")\n  .option(\n    \"-i, --icons <icon-refs>\",\n    \"Limit the output to the selected icons. Icons can be provided with their unicode value or the full reference\",\n    function(val) {\n      return val ? val.split(\",\") : [];\n    }\n  )\n  .option(\n    \"-p, --png <heightInPx>\",\n    \"Include this to generate PNG files. Please note you will need to have an executable binary in your path for 'batik-rasterizer'\",\n    parseInt\n  )\n  .option(\n    \"-c, --color <colorcode>\",\n    \"Set the color of icons in the output (relevant mainly for PNG files)\"\n  )\n  .parse(process.argv);\n\nconst svgFontFile = program.args[0], outputDir = program.args[1];\nif (!svgFontFile || !outputDir) {\n  program.help();\n}\n\nif (!fs.existsSync(svgFontFile)) {\n  console.error(\"This provided SVG font file does not exist\");\n  process.exit();\n}\n\nconst config: UserConf = {\n  icons: program.icons,\n  png: program.png,\n  color: program.color\n};\nblaster(svgFontFile, outputDir, config);\n","/home/travis/build/npmtest/node-npmtest-font-blast/node_modules/font-blast/src/index.js":"// @flow\nimport path from \"path\";\nimport fs from \"graceful-fs\";\nimport mkdir from \"mkdirp\";\nimport verify from \"./verify\";\nimport extractor from \"./glyph-extractor\";\nimport pngGenerator from \"./png-generator\";\nimport type { IconInformation } from \"./glyph-extractor\";\n\ntype UserConf = {\n  png?: Boolean,\n  filenames?: Object,\n  icons?: Array<string>,\n  cleanCharacter?: Function\n};\n\nconst defaultConfig: UserConf = {};\n\nfunction mainBlaster(\n  fontFile: string,\n  destinationFolder: string,\n  userConfig: UserConf\n) {\n  const config = Object.assign({}, defaultConfig, userConfig || {});\n  const svgFontContent = fs.readFileSync(fontFile, \"utf-8\");\n\n  return extractor(\n    svgFontContent,\n    config.filenames,\n    function(characterSvgs: Array<IconInformation>) {\n      console.info(\n        \"Found \" + characterSvgs.length + \" available icons in the font\"\n      );\n      console.info(\"Generating SVG content for each character...\");\n\n      const svgDir = path.resolve(\n        process.cwd(),\n        path.join(destinationFolder, \"svg\")\n      );\n      const pngDir = path.resolve(\n        process.cwd(),\n        path.join(destinationFolder, \"png\")\n      );\n\n      if (!fs.existsSync(svgDir)) mkdir.sync(svgDir);\n\n      let savedIcons = [];\n      characterSvgs.forEach((char: IconInformation) => {\n        const filename = char.name ? char.name : char.code;\n        //If a subset of icons set was requested, ignore any others that are not within the subset\n        if (\n          config.icons &&\n          config.icons.length &&\n          config.icons.indexOf(char.code) === -1 &&\n          config.icons.indexOf(filename) === -1\n        ) {\n          return;\n        }\n        savedIcons.push(char);\n        fs.writeFileSync(path.join(svgDir, filename + \".svg\"), char.svg);\n      });\n      console.info(\"Saved \" + savedIcons.length + \" files to \" + svgDir);\n\n      if (config.png && !isNaN(config.png)) {\n        console.info(\"Generating PNG images - this may take a minute...\");\n        pngGenerator(svgDir, pngDir, config.png);\n      }\n\n      verify(svgFontContent, savedIcons, config.png, destinationFolder);\n    },\n    config.cleanCharacter\n  );\n}\n\nexport default mainBlaster;\n"}